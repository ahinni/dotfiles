# =============================================================================
# Ruby/Gem Functions
# =============================================================================

# Switch to a gem directory, trying to match your name the best
function cdgem {
  if ! command -v gem &> /dev/null; then
    echo "Error: gem command not found"
    return 1
  fi

  local gem_dir=$(gem env gemdir 2>/dev/null)
  if [[ -z "$gem_dir" ]]; then
    echo "Error: Could not determine gem directory"
    return 1
  fi

  if [[ ! -d "$gem_dir/gems" ]]; then
    echo "Error: Gems directory not found at $gem_dir/gems"
    return 1
  fi

  cd "$gem_dir/gems" || return 1

  if [[ -n "$1" ]]; then
    local target=$(ls | grep "$1" | sort | tail -1)
    if [[ -n "$target" ]]; then
      cd "$target" || return 1
    else
      echo "No gem matching '$1' found"
      return 1
    fi
  fi
}

function sgi {
  sudo gem install "$1"
}

function glg {
  gem list | grep "$1"
}

# =============================================================================
# Rails Functions
# =============================================================================

function rrg {
  bundle exec rake routes | grep "$1"
}

# =============================================================================
# Git Functions
# =============================================================================

function parse_git_branch {
  local val=$(git_branch_name | sed 's_\(.*\)_(\1)_')
  echo "$val"
}

function git-new-remote-tracking {
  if [[ -z "$1" ]]; then
    echo "Usage: git-new-remote-tracking <branch-name>"
    return 1
  fi
  git checkout -b "$1" && git push -u origin "$1"
}

function git_branch_name {
  local val=$(git branch 2>/dev/null | grep '^*' | colrm 1 2)
  echo "$val"
}

# Note: This function assumes a specific workflow. Consider simplifying or removing.
function git-done {
  local branch=$(git_branch_name)
  if [[ -z "$branch" || "$branch" == "master" || "$branch" == "main" ]]; then
    echo "Error: Not on a feature branch"
    return 1
  fi

  echo "Warning: This will merge $branch into master and delete it. Continue? (y/N)"
  read -r response
  if [[ ! "$response" =~ ^[Yy]$ ]]; then
    echo "Aborted"
    return 1
  fi

  git checkout master && git pull --rebase && \
  git checkout "$branch" && git rebase master && \
  git checkout master && git merge "$branch" && \
  bundle install && bundle exec rake db:migrate && bundle exec rake && \
  git push && git branch -d "$branch" && git push origin :"$branch"
}

function git-nuke {
  if [[ -z "$1" ]]; then
    echo "Usage: git-nuke <branch-name>"
    return 1
  fi
  git branch -D "$1" && git push origin :"$1"
}

# Creating a remote tracking branch
function track {
  if [[ -z "$1" ]]; then
    echo "Usage: track <branch-name>"
    return 1
  fi
  git branch --track "$1" "origin/$1"
}

function g {
  if [[ $# > 0 ]]; then
    git "$@"
  else
    git status
  fi
}

# Zsh-specific git completion for g function
compdef g=git

# =============================================================================
# Kubernetes Functions
# =============================================================================

# Switch kubectl context and show current contexts
function kc () {
  if [[ -n "$1" ]]; then
    kubectl config use-context "$1"
  fi
  kubectl config get-contexts
}

# Get a shell in a kubernetes pod by app name
function kubeshell() {
  if [[ -z "$1" ]]; then
    echo "Usage: kubeshell <app-name> [context] [namespace]"
    return 1
  fi

  local ctxopts=""
  local nsopts=""

  if [[ -n "$2" ]]; then
    ctxopts="--context $2"
  fi

  if [[ -n "$3" ]]; then
    nsopts="-n $3"
  fi

  local pod=$(kubectl $ctxopts $nsopts get pod -l app.kubernetes.io/name="$1" -o name | head -1)

  if [[ -z "$pod" ]]; then
    echo "No pod found for app: $1"
    return 1
  fi

  kubectl $ctxopts $nsopts exec -it "$pod" -- bash
}

# =============================================================================
# AWS/Database Functions
# =============================================================================

# Get database password from AWS Secrets Manager
function dbpass () {
  if [[ $# -lt 1 ]]; then
    echo "Usage: ${funcstack[1]} <env> [user] [region]"
    echo
    echo "  env     - Environment name (e.g., dev, prod)"
    echo "  user    - Optional. One of: marketspace (default), recording, sidewinder"
    echo "  region  - Optional. One of: us1 (default), eu1"
    echo
    echo "Examples:"
    echo "  ${funcstack[1]} dev"
    echo "  ${funcstack[1]} prod recording"
    echo "  ${funcstack[1]} dev sidewinder eu1"
    return 1
  fi

  local env="$1"
  local user="${2:-marketspace}"
  local region_code="${3:-us1}"

  # Determine AWS region
  local region
  if [[ "$region_code" == "us1" && "$env" == "prod" ]]; then
    region="us-east-2"
  else
    case "$region_code" in
      us1) region="us-west-2" ;;
      eu1) region="eu-central-1" ;;
      *) echo "Unsupported region code: $region_code" >&2; return 1 ;;
    esac
  fi

  # Determine secret key
  local secret_key
  case "$user" in
    marketspace) secret_key="MARKETSPACE_DB_PASSWORD" ;;
    recording) secret_key="RECORDING_DB_PASSWORD" ;;
    sidewinder) secret_key="SIDEWINDER_DB_PASSWORD" ;;
    *) echo "Unsupported user: $user" >&2; return 1 ;;
  esac

  aws --profile nuso --region "$region" secretsmanager get-secret-value \
    --secret-id "marketspace-${env}-portal-api-settings" \
    --query SecretString --output text | \
    jq -r --arg key "$secret_key" '.[$key]'
}

# =============================================================================
# Zsh-Specific Enhanced Functions
# =============================================================================

# Enhanced directory creation and navigation
function take {
  if [[ -z "$1" ]]; then
    echo "Usage: take <directory-name>"
    return 1
  fi
  mkdir -p "$1" && cd "$1"
}

# Enhanced file search with fzf integration
function ff {
  if command -v fzf &> /dev/null; then
    find . -type f | fzf --preview 'head -100 {}'
  else
    find . -type f -name "*$1*"
  fi
}

# Enhanced process search and kill
function psg {
  ps aux | grep -v grep | grep "$1"
}

function psk {
  local pid=$(ps aux | grep -v grep | grep "$1" | awk '{print $2}' | head -1)
  if [[ -n "$pid" ]]; then
    echo "Killing process $pid"
    kill "$pid"
  else
    echo "No process found matching '$1'"
  fi
}

# Quick file editing
function e {
  if [[ -z "$1" ]]; then
    nvim .
  else
    nvim "$1"
  fi
}

# Extract various archive formats
function extract {
  if [[ -z "$1" ]]; then
    echo "Usage: extract <archive-file>"
    return 1
  fi

  if [[ ! -f "$1" ]]; then
    echo "Error: '$1' is not a valid file"
    return 1
  fi

  case "$1" in
    *.tar.bz2)   tar xjf "$1"     ;;
    *.tar.gz)    tar xzf "$1"     ;;
    *.bz2)       bunzip2 "$1"     ;;
    *.rar)       unrar x "$1"     ;;
    *.gz)        gunzip "$1"      ;;
    *.tar)       tar xf "$1"      ;;
    *.tbz2)      tar xjf "$1"     ;;
    *.tgz)       tar xzf "$1"     ;;
    *.zip)       unzip "$1"       ;;
    *.Z)         uncompress "$1"  ;;
    *.7z)        7z x "$1"        ;;
    *)           echo "Error: '$1' cannot be extracted via extract()" ;;
  esac
}

# Quick weather check
function weather {
  local location="${1:-}"
  curl -s "wttr.in/${location}?format=3"
}

# =============================================================================
# Starship Prompt Toggle Functions
# =============================================================================

# Get the directory where starship configs are stored
STARSHIP_CONFIG_DIR="$HOME/.zsh"

# Function to switch to full prompt (default)
function prompt-full {
    export STARSHIP_CONFIG="$STARSHIP_CONFIG_DIR/starship.toml"
    echo "🚀 Switched to FULL prompt configuration"
    echo "   Features: Time, Git, Languages, Cloud tools, System info"
    # Re-initialize starship with new config
    if command -v starship &> /dev/null; then
        eval "$(starship init zsh)"
        # Force prompt refresh
        zle && zle reset-prompt
    fi
}

# Function to switch to minimal prompt
function prompt-minimal {
    export STARSHIP_CONFIG="$STARSHIP_CONFIG_DIR/starship-minimal.toml"
    echo "📦 Switched to MINIMAL prompt configuration"
    echo "   Features: Hostname, Directory, Basic git info"
    # Re-initialize starship with new config
    if command -v starship &> /dev/null; then
        eval "$(starship init zsh)"
        # Force prompt refresh
        zle && zle reset-prompt
    fi
}

# Function to switch to single-line prompt
function prompt-single {
    export STARSHIP_CONFIG="$STARSHIP_CONFIG_DIR/starship-single.toml"
    echo "➡️  Switched to SINGLE-LINE prompt configuration"
    echo "   Features: Directory, Git status on one line"
    # Re-initialize starship with new config
    if command -v starship &> /dev/null; then
        eval "$(starship init zsh)"
        # Force prompt refresh
        zle && zle reset-prompt
    fi
}

# Function to switch to super minimal prompt
function prompt-super-minimal {
    export STARSHIP_CONFIG="$STARSHIP_CONFIG_DIR/starship-super-minimal.toml"
    echo "⚡ Switched to SUPER MINIMAL prompt configuration"
    echo "   Features: Just directory and prompt symbol"
    # Re-initialize starship with new config
    if command -v starship &> /dev/null; then
        eval "$(starship init zsh)"
        # Force prompt refresh
        zle && zle reset-prompt
    fi
}

# Function to reset to default configuration
function prompt-reset {
    unset STARSHIP_CONFIG
    echo "🔄 Reset to DEFAULT Starship configuration"
    echo "   Using: ~/.config/starship.toml (if exists) or built-in defaults"
    # Re-initialize starship with new config
    if command -v starship &> /dev/null; then
        eval "$(starship init zsh)"
        # Force prompt refresh
        zle && zle reset-prompt
    fi
}

# Function to show current prompt configuration
function prompt-status {
    echo "Current Starship configuration:"
    if [[ -n "$STARSHIP_CONFIG" ]]; then
        echo "  📁 Config file: $STARSHIP_CONFIG"
        local config_name=$(basename "$STARSHIP_CONFIG" .toml)
        case "$config_name" in
            "starship")
                echo "  🚀 Mode: FULL (default dotfiles config)"
                ;;
            "starship-minimal")
                echo "  📦 Mode: MINIMAL"
                ;;
            "starship-single")
                echo "  ➡️  Mode: SINGLE-LINE"
                ;;
            "starship-super-minimal")
                echo "  ⚡ Mode: SUPER MINIMAL"
                ;;
            *)
                echo "  ❓ Mode: CUSTOM ($config_name)"
                ;;
        esac
    else
        echo "  🔄 Using default Starship configuration"
        echo "  📁 Config file: ~/.config/starship.toml (if exists) or built-in"
    fi
}

# Function to list available prompt configurations
function prompt-list {
    echo "Available Starship prompt configurations:"
    echo ""
    echo "🚀 prompt-full          - Full-featured prompt (time, git, languages, etc.)"
    echo "📦 prompt-minimal       - Minimal prompt (hostname, directory, basic git)"
    echo "➡️  prompt-single        - Single-line prompt (directory and git only)"
    echo "⚡ prompt-super-minimal - Super minimal (directory and prompt symbol only)"
    echo "🔄 prompt-reset         - Reset to default Starship configuration"
    echo ""
    echo "ℹ️  prompt-status        - Show current configuration"
    echo "📋 prompt-list          - Show this list"
}

# =============================================================================
# History Functions
# =============================================================================

# History search function (like history | grep but better)
function hgrep {
  if [[ $# -eq 0 ]]; then
    echo "Usage: hgrep <search_term>"
    echo "Example: hgrep git"
    return 1
  fi
  fc -l 1 | grep -i "$@"
}

# Function to reload history (useful for troubleshooting)
function reload_history {
  if [[ -r "${HISTFILE}" ]]; then
    fc -R "${HISTFILE}" 2>/dev/null && echo "History reloaded successfully." || echo "Failed to reload history."
    echo "Current count: $(history | wc -l)"
    echo "History file lines: $(wc -l < "${HISTFILE}" 2>/dev/null || echo "unknown")"
  else
    echo "History file ${HISTFILE} not found or not readable."
  fi
}

# Function to force save current session history
function save_history {
  fc -W "${HISTFILE}"
  echo "History saved to ${HISTFILE}"
}

# Function to ensure history is properly loaded (workaround for SHARE_HISTORY issues)
function ensure_history_loaded {
  if [[ -r "${HISTFILE}" ]]; then
    local current_hist_count=$(history | wc -l | tr -d ' ')
    local file_line_count=$(wc -l < "${HISTFILE}" 2>/dev/null | tr -d ' ')

    # If current session has significantly fewer commands than the file, load it
    if [[ $current_hist_count -lt 50 && $file_line_count -gt 100 ]]; then
      fc -R "${HISTFILE}" 2>/dev/null || true
    fi
  fi
}


