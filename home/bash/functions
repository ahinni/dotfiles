# =============================================================================
# Ruby/Gem Functions
# =============================================================================

# Switch to a gem directory, trying to match your name the best
function cdgem {
  if ! command -v gem &> /dev/null; then
    echo "Error: gem command not found"
    return 1
  fi

  local gem_dir=$(gem env gemdir 2>/dev/null)
  if [[ -z "$gem_dir" ]]; then
    echo "Error: Could not determine gem directory"
    return 1
  fi

  if [[ ! -d "$gem_dir/gems" ]]; then
    echo "Error: Gems directory not found at $gem_dir/gems"
    return 1
  fi

  cd "$gem_dir/gems" || return 1

  if [[ -n "$1" ]]; then
    local target=$(ls | grep "$1" | sort | tail -1)
    if [[ -n "$target" ]]; then
      cd "$target" || return 1
    else
      echo "No gem matching '$1' found"
      return 1
    fi
  fi
}

function sgi {
  sudo gem install "$1"
}

function glg {
  gem list | grep "$1"
}


# =============================================================================
# Rails Functions
# =============================================================================

function rrg {
  bundle exec rake routes | grep "$1"
}

# =============================================================================
# Git Functions
# =============================================================================

function parse_git_branch {
  local val=$(git_branch_name | sed 's_\(.*\)_(\1)_')
  echo "$val"
}

function git-new-remote-tracking {
  if [[ -z "$1" ]]; then
    echo "Usage: git-new-remote-tracking <branch-name>"
    return 1
  fi
  git checkout -b "$1" && git push -u origin "$1"
}

function git_branch_name {
  local val=$(git branch 2>/dev/null | grep '^*' | colrm 1 2)
  echo "$val"
}

# Note: This function assumes a specific workflow. Consider simplifying or removing.
function git-done {
  local branch=$(git_branch_name)
  if [[ -z "$branch" || "$branch" == "master" || "$branch" == "main" ]]; then
    echo "Error: Not on a feature branch"
    return 1
  fi

  echo "Warning: This will merge $branch into master and delete it. Continue? (y/N)"
  read -r response
  if [[ ! "$response" =~ ^[Yy]$ ]]; then
    echo "Aborted"
    return 1
  fi

  git checkout master && git pull --rebase && \
  git checkout "$branch" && git rebase master && \
  git checkout master && git merge "$branch" && \
  bundle install && bundle exec rake db:migrate && bundle exec rake && \
  git push && git branch -d "$branch" && git push origin :"$branch"
}

function git-nuke {
  if [[ -z "$1" ]]; then
    echo "Usage: git-nuke <branch-name>"
    return 1
  fi
  git branch -D "$1" && git push origin :"$1"
}

# Creating a remote tracking branch
function track {
  if [[ -z "$1" ]]; then
    echo "Usage: track <branch-name>"
    return 1
  fi
  git branch --track "$1" "origin/$1"
}

function g {
  if [[ $# > 0 ]]; then
    git "$@"
  else
    git status
  fi
}

# =============================================================================
# Kubernetes Functions
# =============================================================================

# Switch kubectl context and show current contexts
function kc () {
  if [[ -n "$1" ]]; then
    kubectl config use-context "$1"
  fi
  kubectl config get-contexts
}

# Get a shell in a kubernetes pod by app name
function kubeshell() {
  if [[ -z "$1" ]]; then
    echo "Usage: kubeshell <app-name> [context] [namespace]"
    return 1
  fi

  local ctxopts=""
  local nsopts=""

  if [[ -n "$2" ]]; then
    ctxopts="--context $2"
  fi

  if [[ -n "$3" ]]; then
    nsopts="-n $3"
  fi

  local pod=$(kubectl $ctxopts $nsopts get pod -l app.kubernetes.io/name="$1" -o name | head -1)

  if [[ -z "$pod" ]]; then
    echo "No pod found for app: $1"
    return 1
  fi

  kubectl $ctxopts $nsopts exec -it "$pod" -- bash
}

# =============================================================================
# AWS/Database Functions
# =============================================================================

# Get database password from AWS Secrets Manager
function dbpass () {
  if [[ $# -lt 1 ]]; then
    echo "Usage: ${FUNCNAME[0]} <env> [user] [region]"
    echo
    echo "  env     - Environment name (e.g., dev, prod)"
    echo "  user    - Optional. One of: marketspace (default), recording, sidewinder"
    echo "  region  - Optional. One of: us1 (default), eu1"
    echo
    echo "Examples:"
    echo "  ${FUNCNAME[0]} dev"
    echo "  ${FUNCNAME[0]} prod recording"
    echo "  ${FUNCNAME[0]} dev sidewinder eu1"
    return 1
  fi

  local env="$1"
  local user="${2:-marketspace}"
  local region_code="${3:-us1}"

  # Determine AWS region
  local region
  if [[ "$region_code" == "us1" && "$env" == "prod" ]]; then
    region="us-east-2"
  else
    case "$region_code" in
      us1) region="us-west-2" ;;
      eu1) region="eu-central-1" ;;
      *) echo "Unsupported region code: $region_code" >&2; return 1 ;;
    esac
  fi

  # Determine secret key
  local secret_key
  case "$user" in
    marketspace) secret_key="MARKETSPACE_DB_PASSWORD" ;;
    recording) secret_key="RECORDING_DB_PASSWORD" ;;
    sidewinder) secret_key="SIDEWINDER_DB_PASSWORD" ;;
    *) echo "Unsupported user: $user" >&2; return 1 ;;
  esac

  aws --profile nuso --region "$region" secretsmanager get-secret-value \
    --secret-id "marketspace-${env}-portal-api-settings" \
    --query SecretString --output text | \
    jq -r --arg key "$secret_key" '.[$key]'
}

